a)
In the file EmployeeRepositoryTest, there's a chaining happening in the method  public void givenSetOfEmployees_whenFindAll_thenReturnAllEmployees(), on the last line, where you can read 
assertThat(allEmployees).hasSize(3).extracting(Employee::getName).containsOnly(alex.getName(), ron.getName(), bob.getName());
there are tests that are getting chained together.

You can also finnd a test chain in the method
public void whenFindEmployedByExistingId_thenReturnEmployee()
where you can read
assertThat(fromDb.getEmail()).isEqualTo( emp.getEmail());

b)
In the file
EmployeeService_UnitTest
all the tests are unit tests, using Mockito and JUnit, making them not connected to the database.

c)
Using @Mock, we are mocking beahaviour, idependent from SpringBoot, we are basically doing unit tests
When using @MockBean we are adding Mockito mocks to a SpringBoot application.
In summary if we are mocking behaviour that doesn't rely on any spring dependencies we use @Mock
otherwise we should use @MockBean

